#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 4cd55487-c602-407f-b38f-de0135b0a339
# Source File: Ch24-Lab.pff
#------------------------------------------------------------------------
#========================================================================
# Code Generated By: SAPIEN Technologies, Inc., PowerShell Studio 2012 v3.0.6
# Generated On: 7/2/2012 4:57 PM
# Generated By:  Jeffery Hicks
# Organization:  http://jdhitsolutions.com/blog
#========================================================================
#----------------------------------------------
#region Application Functions
#----------------------------------------------

function OnApplicationLoad {
	#Note: This function is not called in Projects
	#Note: This function runs before the form is created
	#Note: To get the script directory in the Packager use: Split-Path $hostinvocation.MyCommand.path
	#Note: To get the console output in the Packager (Windows Mode) use: $ConsoleOutput (Type: System.Collections.ArrayList)
	#Important: Form controls cannot be accessed in this function
	#TODO: Add snapins and custom code to validate the application load
	
	return $true #return true for success or false for failure
}

function OnApplicationExit {
	#Note: This function is not called in Projects
	#Note: This function runs after the form is closed
	#TODO: Add custom code to clean up and unload snapins when the application exits
	
	$script:ExitCode = 0 #Set the exit code for the Packager
}

#endregion Application Functions

#----------------------------------------------
# Generated Form Function
#----------------------------------------------
function Call-Ch24-Lab_pff {

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load("mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
	[void][reflection.assembly]::Load("System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
	[void][reflection.assembly]::Load("System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formServiceReporter = New-Object 'System.Windows.Forms.Form'
	$groupbox1 = New-Object 'System.Windows.Forms.GroupBox'
	$radiobuttonAll = New-Object 'System.Windows.Forms.RadioButton'
	$radiobuttonStopped = New-Object 'System.Windows.Forms.RadioButton'
	$radiobuttonRunning = New-Object 'System.Windows.Forms.RadioButton'
	$labelComputername = New-Object 'System.Windows.Forms.Label'
	$Computername = New-Object 'System.Windows.Forms.TextBox'
	$buttonOK = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	
	
	
	
	
	
	$FormEvent_Load={
		#TODO: Initialize Form Controls here
		$Computername.Text=$env:COMPUTERNAME
	}
	
	Function Get-ServiceData {
	[cmdletbinding()]
	Param(
	[parameter(Position=0,Mandatory=$True,HelpMessage="Enter a computername")]
	[ValidateNotNullorEmpty()]
	[string]$Computername,
	[Parameter(Position=1)]
	[ValidateSet("Running","Stopped","All","%")]
	[string]$Filter="All"
	)
	
	Try {
	    Write-Verbose "Getting $filter services from $computername"
	    if ($Filter -eq "All") {
	        $filter='%'
	        Write-Verbose "Using WMI filter: state Like '$Filter'"
	    }
	    $services=Get-WmiObject -Class Win32_Service -ComputerName $Computername -filter "State Like '$Filter'"
	   	Write-Verbose "Found $($services.count) matching services"
		#write selected results to the pipeline
	 	$services | Select Name,Displayname,State,StartMode,StartName
	}
	Catch {
	    Write-Warning "Failed to get services from $Computername. $_.Exception.Message"
	}
	
	} #end function
	
	$buttonOK_Click={
		#check radio buttons to figure out what type of services to query
		if ($radiobuttonAll.Checked) {
			$filter="%"	
		}
		elseif ($radiobuttonRunning.Checked) {
			$filter="Running"	
		}
		elseif ($radiobuttonStopped.Checked) {
			$filter="Stopped"	
		}
			
		#run the command and send results to the pipeline
		Get-ServiceData -Computername $Computername.Text -Filter $filter | Out-String | Write-Host
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formServiceReporter.WindowState = $InitialFormWindowState
	}
	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonOK.remove_Click($buttonOK_Click)
			$formServiceReporter.remove_Load($FormEvent_Load)
			$formServiceReporter.remove_Load($Form_StateCorrection_Load)
			$formServiceReporter.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	#
	# formServiceReporter
	#
	$formServiceReporter.Controls.Add($groupbox1)
	$formServiceReporter.Controls.Add($labelComputername)
	$formServiceReporter.Controls.Add($Computername)
	$formServiceReporter.Controls.Add($buttonOK)
	$formServiceReporter.AcceptButton = $buttonOK
	$formServiceReporter.ClientSize = '284, 191'
	$formServiceReporter.FormBorderStyle = 'FixedDialog'
	$formServiceReporter.MaximizeBox = $False
	$formServiceReporter.MinimizeBox = $False
	$formServiceReporter.Name = "formServiceReporter"
	$formServiceReporter.StartPosition = 'CenterScreen'
	$formServiceReporter.Text = "Service Reporter"
	$formServiceReporter.add_Load($FormEvent_Load)
	#
	# groupbox1
	#
	$groupbox1.Controls.Add($radiobuttonAll)
	$groupbox1.Controls.Add($radiobuttonStopped)
	$groupbox1.Controls.Add($radiobuttonRunning)
	$groupbox1.Location = '13, 42'
	$groupbox1.Name = "groupbox1"
	$groupbox1.Size = '239, 94'
	$groupbox1.TabIndex = 3
	$groupbox1.TabStop = $False
	$groupbox1.Text = "Status Filter"
	#
	# radiobuttonAll
	#
	$radiobuttonAll.Location = '17, 60'
	$radiobuttonAll.Name = "radiobuttonAll"
	$radiobuttonAll.Size = '104, 24'
	$radiobuttonAll.TabIndex = 2
	$radiobuttonAll.Text = "All"
	$radiobuttonAll.UseVisualStyleBackColor = $True
	#
	# radiobuttonStopped
	#
	$radiobuttonStopped.Location = '17, 39'
	$radiobuttonStopped.Name = "radiobuttonStopped"
	$radiobuttonStopped.Size = '104, 24'
	$radiobuttonStopped.TabIndex = 1
	$radiobuttonStopped.Text = "Stopped"
	$radiobuttonStopped.UseVisualStyleBackColor = $True
	#
	# radiobuttonRunning
	#
	$radiobuttonRunning.Checked = $True
	$radiobuttonRunning.Location = '17, 20'
	$radiobuttonRunning.Name = "radiobuttonRunning"
	$radiobuttonRunning.Size = '104, 24'
	$radiobuttonRunning.TabIndex = 0
	$radiobuttonRunning.TabStop = $True
	$radiobuttonRunning.Text = "Running"
	$radiobuttonRunning.UseVisualStyleBackColor = $True
	#
	# labelComputername
	#
	$labelComputername.ImageAlign = 'MiddleRight'
	$labelComputername.Location = '13, 8'
	$labelComputername.Name = "labelComputername"
	$labelComputername.Size = '83, 23'
	$labelComputername.TabIndex = 2
	$labelComputername.Text = "Computername"
	$labelComputername.TextAlign = 'MiddleRight'
	#
	# Computername
	#
	$Computername.Location = '102, 8'
	$Computername.Name = "Computername"
	$Computername.Size = '150, 20'
	$Computername.TabIndex = 1
	#
	# buttonOK
	#
	$buttonOK.Anchor = 'Bottom, Right'
	$buttonOK.Location = '177, 156'
	$buttonOK.Name = "buttonOK"
	$buttonOK.Size = '75, 23'
	$buttonOK.TabIndex = 0
	$buttonOK.Text = "OK"
	$buttonOK.UseVisualStyleBackColor = $True
	$buttonOK.add_Click($buttonOK_Click)
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formServiceReporter.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formServiceReporter.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formServiceReporter.add_FormClosed($Form_Cleanup_FormClosed)
	#Show the Form
	return $formServiceReporter.ShowDialog()

} #End Function

#Call OnApplicationLoad to initialize
if((OnApplicationLoad) -eq $true)
{
	#Call the form
	Call-Ch24-Lab_pff | Out-Null
	#Perform cleanup
	OnApplicationExit
}
